/**
 *
 * Copyright (c) 2021 Microchip Technology Inc. and its subsidiaries.
 *
 * \asf_license_start
 *
 * \page License
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */

/** @file espi_io.h
 * MEC172x eSPI IO Component definitions
 */
/** @defgroup MEC172x Peripherals eSPI IO Component
 */

#ifndef _COMPONENT_ESPI_IO_H
#define _COMPONENT_ESPI_IO_H

#include <stdint.h>
#include <stddef.h>

#include <mec_defs.h>
#include <regaccess.h>

/*------------------------------------------------------------------*/

#define MCHP_ESPI_IO_BASE_ADDR	0x400F3400ul

/* Offsets from base for various register groups */
#define MCHP_ESPI_IO_PC_OFS		0x0100ul
#define MCHP_ESPI_IO_HOST_BAR_OFS	0x0120ul
#define MCHP_ESPI_IO_LTR_OFS		0x0220ul
#define MCHP_ESPI_IO_OOB_OFS		0x0240ul
#define MCHP_ESPI_IO_FC_OFS		0x0280ul
#define MCHP_ESPI_IO_CAP_OFS		0x02b0ul
#define MCHP_ESPI_IO_SIRQ_OFS		0x03a0ul

/* ESPI IO Component interrupts */
#define MCHP_ESPI_IO_GIRQ		19u
#define MCHP_ESPI_IO_GIRQ_NVIC		11u

/* Direct mode NVIC inputs */
#define MCHP_ESPI_PC_NVIC		103u
#define MCHP_ESPI_BM1_NVIC		104u
#define MCHP_ESPI_BM2_NVIC		105u
#define MCHP_ESPI_LTR_NVIC		106u
#define MCHP_ESPI_OOB_UP_NVIC		107u
#define MCHP_ESPI_OOB_DN_NVIC		108u
#define MCHP_ESPI_FC_NVIC		109u
#define MCHP_ESPI_ESPI_RST_NVIC 	110u
#define MCHP_ESPI_VW_EN_NVIC		156u
#define MCHP_ESPI_SAF_DONE		166u
#define MCHP_ESPI_SAF_ERR		167u
#define MCHP_ESPI_SAF_CACHE		169u

/* GIRQ Source, Enable_Set/Clr, Result registers bit positions */
#define MCHP_ESPI_PC_GIRQ_POS		0u
#define MCHP_ESPI_BM1_GIRQ_POS		1u
#define MCHP_ESPI_BM2_GIRQ_POS		2u
#define MCHP_ESPI_LTR_GIRQ_POS		3u
#define MCHP_ESPI_OOB_UP_GIRQ_POS	4u
#define MCHP_ESPI_OOB_DN_GIRQ_POS	5u
#define MCHP_ESPI_FC_GIRQ_POS		6u
#define MCHP_ESPI_ESPI_RST_GIRQ_POS	7u
#define MCHP_ESPI_VW_EN_GIRQ_POS	8u
#define MCHP_ESPI_SAF_DONE_GIRQ_POS	9u
#define MCHP_ESPI_SAF_ERR_GIRQ_POS	10u
#define MCHP_ESPI_SAF_CACHE_GIRQ_POS	11u

#define MCHP_ESPI_PC_GIRQ_VAL		BIT(0)
#define MCHP_ESPI_BM1_GIRQ_VAL		BIT(1)
#define MCHP_ESPI_BM2_GIRQ_VAL		BIT(2)
#define MCHP_ESPI_LTR_GIRQ_VAL		BIT(3)
#define MCHP_ESPI_OOB_UP_GIRQ_VAL	BIT(4)
#define MCHP_ESPI_OOB_DN_GIRQ_VAL	BIT(5)
#define MCHP_ESPI_FC_GIRQ_VAL		BIT(6)
#define MCHP_ESPI_ESPI_RST_GIRQ_VAL	BIT(7)
#define MCHP_ESPI_VW_EN_GIRQ_VAL	BIT(8)
#define MCHP_ESPI_SAF_DONE_GIRQ_VAL	BIT(9)
#define MCHP_ESPI_SAF_ERR_GIRQ_VAL	BIT(10)
#define MCHP_ESPI_SAF_CACHE_GIRQ_VAL	BIT(11)

/* eSPI Global Capabilities 0 */
#define MCHP_ESPI_GBL_CAP0_MASK		0x0Fu
#define MCHP_ESPI_GBL_CAP0_PC_SUPP	BIT(0)
#define MCHP_ESPI_GBL_CAP0_VW_SUPP	BIT(1)
#define MCHP_ESPI_GBL_CAP0_OOB_SUPP	BIT(2)
#define MCHP_ESPI_GBL_CAP0_FC_SUPP	BIT(3)

/* eSPI Global Capabilities 1 */
#define MCHP_ESPI_GBL_CAP1_MASK			0xFFu
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_POS		0u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_MASK	0x07u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_20M		0x00u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_25M		0x01u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_33M		0x02u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_50M		0x03u
#define MCHP_ESPI_GBL_CAP1_MAX_FREQ_66M		0x04u
#define MCHP_ESPI_GBL_CAP1_ALERT_POS		3u /* Read-Only */
#define MCHP_ESPI_GBL_CAP1_ALERT_DED_PIN	\
	BIT(MCHP_ESPI_GBL_CAP1_ALERT_POS)
#define MCHP_ESPI_GBL_CAP1_ALERT_ON_IO1		0u
#define MCHP_ESPI_GBL_CAP1_IO_MODE_POS		4u
#define MCHP_ESPI_GBL_CAP1_IO_MODE_MASK0	0x03u
#define MCHP_ESPI_GBL_CAP1_IO_MODE_MASK		SHLU32(0x03u, 4)
#define MCHP_ESPI_GBL_CAP1_IO_MODE0_1		0u
#define MCHP_ESPI_GBL_CAP1_IO_MODE0_12		1u
#define MCHP_ESPI_GBL_CAP1_IO_MODE0_14		2u
#define MCHP_ESPI_GBL_CAP1_IO_MODE0_124		3u
#define MCHP_ESPI_GBL_CAP1_IO_MODE_1		\
	SHLU32(MCHP_ESPI_GBL_CAP1_IO_MODE0_1, MCHP_ESPI_GBL_CAP1_IO_MODE_POS)

#define MCHP_ESPI_GBL_CAP1_IO_MODE_12		\
	SHLU32(MCHP_ESPI_GBL_CAP1_IO_MODE0_12, MCHP_ESPI_GBL_CAP1_IO_MODE_POS)

#define MCHP_ESPI_GBL_CAP1_IO_MODE_14		\
	SHLU32(MCHP_ESPI_GBL_CAP1_IO_MODE0_14, MCHP_ESPI_GBL_CAP1_IO_MODE_POS)

#define MCHP_ESPI_GBL_CAP1_IO_MODE_124		\
	SHLU32(MCHP_ESPI_GBL_CAP1_IO_MODE0_124, MCHP_ESPI_GBL_CAP1_IO_MODE_POS)

/*
 * Support Open Drain ALERT pin configuration
 * EC sets this bit if it can support open-drain ESPI_ALERT#
 */
#define MCHP_ESPI_GBL_CAP1_ALERT_ODS_POS	6u
#define MCHP_ESPI_GBL_CAP1_ALERT_ODS BIT(MCHP_ESPI_GBL_CAP1_ALERT_ODS_POS)

/*
 * Read-Only ALERT Open Drain select.
 * If EC has indicated it can support open-drain ESPI_ALERT# then
 * the Host can enable open-drain ESPI_ALERT# by sending a configuraiton
 * message. This read-only bit relects the configuration selection.
 */
#define MCHP_ESPI_GBL_CAP1_ALERT_ODS_SEL_POS	7u
#define MCHP_ESPI_GBL_CAP1_ALERT_SEL_ODS \
	BIT(MCHP_ESPI_GBL_CAP1_ALERT_ODS_SEL_POS)

/* Peripheral Channel(PC) Capabilites */
#define MCHP_ESPI_PC_CAP_MASK			0x07u
#define MCHP_ESPI_PC_CAP_MAX_PLD_SZ_MASK	0x07u
#define MCHP_ESPI_PC_CAP_MAX_PLD_SZ_64		0x01u
#define MCHP_ESPI_PC_CAP_MAX_PLD_SZ_128		0x02u
#define MCHP_ESPI_PC_CAP_MAX_PLD_SZ_256		0x03u

/* Virtual Wire(VW) Capabilities */
#define MCHP_ESPI_VW_CAP_MASK			0x3Fu
#define MCHP_ESPI_VW_CAP_MAX_VW_CNT_MASK	0x3Fu

/* Out-of-Band(OOB) Capabilities */
#define MCHP_ESPI_OOB_CAP_MASK			0x07u
#define MCHP_ESPI_OOB_CAP_MAX_PLD_SZ_MASK	0x07u
#define MCHP_ESPI_OOB_CAP_MAX_PLD_SZ_73		0x01u
#define MCHP_ESPI_OOB_CAP_MAX_PLD_SZ_137	0x02u
#define MCHP_ESPI_OOB_CAP_MAX_PLD_SZ_265	0x03u

/* Flash Channel(FC) Capabilities */
#define MCHP_ESPI_FC_CAP_MASK			0xFFu
#define MCHP_ESPI_FC_CAP_MAX_PLD_SZ_MASK	0x07u
#define MCHP_ESPI_FC_CAP_MAX_PLD_SZ_64		0x01u
#define MCHP_ESPI_FC_CAP_SHARE_POS		3u
#define MCHP_ESPI_FC_CAP_SHARE_MASK0		0x03u
#define MCHP_ESPI_FC_CAP_SHARE_MASK		\
	SHLU32(MCHP_ESPI_FC_CAP_SHARE_MASK0, MCHP_ESPI_FC_CAP_SHARE_POS)

#define MCHP_ESPI_FC_CAP_SHARE_MAF_ONLY		0u
#define MCHP_ESPI_FC_CAP_SHARE_MAF2_ONLY	\
	SHLU32(1U, MCHP_ESPI_FC_CAP_SHARE_POS)

#define MCHP_ESPI_FC_CAP_SHARE_SAF_ONLY		\
	SHLU32(2U, MCHP_ESPI_FC_CAP_SHARE_POS)

#define MCHP_ESPI_FC_CAP_SHARE_MAF_SAF		\
	SHLU32(3U, MCHP_ESPI_FC_CAP_SHARE_POS)

#define MCHP_ESPI_FC_CAP_MAX_RD_SZ_POS		5u
#define MCHP_ESPI_FC_CAP_MAX_RD_SZ_MASK0	0x07u
#define MCHP_ESPI_FC_CAP_MAX_RD_SZ_MASK		\
	SHLU32(MCHP_ESPI_FC_CAP_MAX_RD_SZ_MASK0, \
	       MCHP_ESPI_FC_CAP_MAX_RD_SZ_POS)

#define MCHP_ESPI_FC_CAP_MAX_RD_SZ_64		\
	BIT(MCHP_ESPI_FC_CAP_MAX_RD_SZ_POS)

/* PC Ready */
#define MCHP_ESPI_PC_READY_MASK		0x01u;
#define MCHP_ESPI_PC_READY		0x01u;

/* OOB Ready */
#define MCHP_ESPI_OOB_READY_MASK	0x01u;
#define MCHP_ESPI_OOB_READY		0x01u;

/* FC Ready */
#define MCHP_ESPI_FC_READY_MASK		0x01u;
#define MCHP_ESPI_FC_READY		0x01u;

/* ESPI_RESET# Interrupt Status */
#define MCHP_ESPI_RST_ISTS_MASK		0x03u;
#define MCHP_ESPI_RST_ISTS_POS		0u
#define MCHP_ESPI_RST_ISTS		BIT(MCHP_ESPI_RST_ISTS_POS)
#define MCHP_ESPI_RST_ISTS_PIN_RO_POS	1ul
#define MCHP_ESPI_RST_ISTS_PIN_RO_HI	BIT(MCHP_ESPI_RST_ISTS_PIN_RO_POS)

/* ESPI_RESET# Interrupt Enable */
#define MCHP_ESPI_RST_IEN_MASK		0x01ul
#define MCHP_ESPI_RST_IEN		0x01ul

/* eSPI Platform Reset Source */
#define MCHP_ESPI_PLTRST_SRC_MASK	0x01ul
#define MCHP_ESPI_PLTRST_SRC_POS	0ul
#define MCHP_ESPI_PLTRST_SRC_IS_PIN	0x01ul
#define MCHP_ESPI_PLTRST_SRC_IS_VW	0x00ul

/* VW Ready */
#define MCHP_ESPI_VW_READY_MASK		0x01ul
#define MCHP_ESPI_VW_READY		0x01ul

/* SAF Erase Block size */
#define MCHP_ESPI_SERASE_SZ_1K_BITPOS	0
#define MCHP_ESPI_SERASE_SZ_2K_BITPOS	1
#define MCHP_ESPI_SERASE_SZ_4K_BITPOS	2
#define MCHP_ESPI_SERASE_SZ_8K_BITPOS	3
#define MCHP_ESPI_SERASE_SZ_16K_BITPOS	4
#define MCHP_ESPI_SERASE_SZ_32K_BITPOS	5
#define MCHP_ESPI_SERASE_SZ_64K_BITPOS	6
#define MCHP_ESPI_SERASE_SZ_128K_BITPOS 7
#define MCHP_ESPI_SERASE_SZ_1K		BIT(0)
#define MCHP_ESPI_SERASE_SZ_2K		BIT(1)
#define MCHP_ESPI_SERASE_SZ_4K		BIT(2)
#define MCHP_ESPI_SERASE_SZ_8K		BIT(3)
#define MCHP_ESPI_SERASE_SZ_16K		BIT(4)
#define MCHP_ESPI_SERASE_SZ_32K		BIT(5)
#define MCHP_ESPI_SERASE_SZ_64K		BIT(6)
#define MCHP_ESPI_SERASE_SZ_128K	BIT(7)
#define MCHP_ESPI_SERASE_SZ(bitpos) BIT((bitpos) + 10u)

/* VW Error Status */
#define MCHP_ESPI_VW_ERR_STS_MASK		0x33ul
#define MCHP_ESPI_VW_ERR_STS_FATAL_POS		0u
#define MCHP_ESPI_VW_ERR_STS_FATAL_RO		\
	BIT(MCHP_ESPI_VW_ERR_STS_FATAL_POS)

#define MCHP_ESPI_VW_ERR_STS_FATAL_CLR_POS	1u
#define MCHP_ESPI_VW_ERR_STS_FATAL_CLR_WO	\
	BIT(MCHP_ESPI_VW_ERR_STS_FATAL_CLR_POS)

#define MCHP_ESPI_VW_ERR_STS_NON_FATAL_POS	4u
#define MCHP_ESPI_VW_ERR_STS_NON_FATAL_RO	\
	BIT(MCHP_ESPI_VW_ERR_STS_NON_FATAL_POS)

#define MCHP_ESPI_VW_ERR_STS_NON_FATAL_CLR_POS	5u
#define MCHP_ESPI_VW_ERR_STS_NON_FATAL_CLR_WO	\
	BIT(MCHP_ESPI_VW_ERR_STS_NON_FATAL_CLR_POS)

/* VW Channel Enable Status */
#define MCHP_ESPI_VW_EN_STS_MASK	0x01ul
#define MCHP_ESPI_VW_EN_STS_RO		0x01ul

/*
 * MCHP_ESPI_IO_PC - eSPI IO Peripheral Channel registers @ 0x400F3500
 */

/* Peripheral Channel Last Cycle length, type, and tag. */
#define MCHP_ESPI_PC_LC_LEN_POS		0u
#define MCHP_ESPI_PC_LC_LEN_MASK0	0x0FFFul
#define MCHP_ESPI_PC_LC_LEN_MASK	0x0FFFul
#define MCHP_ESPI_PC_LC_TYPE_POS	12u
#define MCHP_ESPI_PC_LC_TYPE_MASK0	0xFFul
#define MCHP_ESPI_PC_LC_TYPE_MASK	(0xFFul << 12)
#define MCHP_ESPI_PC_LC_TAG_POS		20u
#define MCHP_ESPI_PC_LC_TAG_MASK0	0x0Ful
#define MCHP_ESPI_PC_LC_TAG_MASK	(0x0Ful << 20)

/*
 * Peripheral Channel Status
 * Bus error, Channel enable change, and Bus master enable change.
 */
#define MCHP_ESPI_PC_STS_BUS_ERR_POS	16u /* RW1C */
#define MCHP_ESPI_PC_STS_BUS_ERR	BIT(MCHP_ESPI_PC_STS_BUS_ERR_POS)
#define MCHP_ESPI_PC_STS_EN_POS		24u /* RO */
#define MCHP_ESPI_PC_STS_EN		BIT(MCHP_ESPI_PC_STS_EN_POS)
#define MCHP_ESPI_PC_STS_EN_CHG_POS	25u /* RW1C */
#define MCHP_ESPI_PC_STS_EN_CHG		BIT(MCHP_ESPI_PC_STS_EN_CHG_POS)
#define MCHP_ESPI_PC_STS_BM_EN_POS	27u /* RO */
#define MCHP_ESPI_PC_STS_BM_EN		BIT(MCHP_ESPI_PC_STS_BM_EN_POS)
#define MCHP_ESPI_PC_STS_BM_EN_CHG_POS	28u /* RW1C */
#define MCHP_ESPI_PC_STS_BM_EN_CHG	BIT(MCHP_ESPI_PC_STS_BM_EN_CHG_POS)

/*
 * Peripheral Channel Interrupt Enables for
 * Bus error, Channel enable change, and Bus master enable change.
 * PC_LC_ADDR_LSW (@ 0x0000) Periph Chan Last Cycle address LSW
 * PC_LC_ADDR_MSW (@ 0x0004) Periph Chan Last Cycle address MSW
 * PC_LC_LEN_TYPE_TAG (@ 0x0008) Periph Chan Last Cycle length/type/tag
 * PC_ERR_ADDR_LSW (@ 0x000C) Periph Chan Error Address LSW
 * PC_ERR_ADDR_MSW (@ 0x0010) Periph Chan Error Address MSW
 * PC_STATUS (@ 0x0014) Periph Chan Status
 * PC_IEN (@ 0x0018) Periph Chan IEN
 */
#define MCHP_ESPI_PC_IEN_BUS_ERR_POS	16u
#define MCHP_ESPI_PC_IEN_BUS_ERR	BIT(MCHP_ESPI_PC_IEN_BUS_ERR_POS)
#define MCHP_ESPI_PC_IEN_EN_CHG_POS	25u
#define MCHP_ESPI_PC_IEN_EN_CHG		BIT(MCHP_ESPI_PC_IEN_BUS_ERR_POS)
#define MCHP_ESPI_PC_IEN_BM_EN_CHG_POS	28u
#define MCHP_ESPI_PC_IEN_BM_EN_CHG	BIT(MCHP_ESPI_PC_IEN_BUS_ERR_POS)

/*---- ESPI_IO_LTR - eSPI IO LTR registers ----*/
#define MCHP_ESPI_LTR_STS_TX_DONE_POS	0u /* RW1C */
#define MCHP_ESPI_LTR_STS_TX_DONE	BIT(MCHP_ESPI_LTR_STS_TX_DONE_POS)
#define MCHP_ESPI_LTR_STS_OVRUN_POS	3u /* RW1C */
#define MCHP_ESPI_LTR_STS_OVRUN		BIT(MCHP_ESPI_LTR_STS_OVRUN_POS)
#define MCHP_ESPI_LTR_STS_HDIS_POS	4u /* RW1C */
#define MCHP_ESPI_LTR_STS_HDIS		BIT(MCHP_ESPI_LTR_STS_HDIS_POS)
#define MCHP_ESPI_LTR_STS_TX_BUSY_POS	8u /* RO */
#define MCHP_ESPI_LTR_STS_TX_BUSY	BIT(MCHP_ESPI_LTR_STS_TX_BUSY_POS)

#define MCHP_ESPI_LTR_IEN_TX_DONE_POS	0u
#define MCHP_ESPI_LTR_IEN_TX_DONE	BIT(MCHP_ESPI_LTR_IEN_TX_DONE_POS)

#define MCHP_ESPI_LTR_CTRL_START_POS	0u
#define MCHP_ESPI_LTR_CTRL_START	BIT(MCHP_ESPI_LTR_CTRL_START_POS)
#define MCHP_ESPI_LTR_CTRL_TAG_POS	8u
#define MCHP_ESPI_LTR_CTRL_TAG_MASK0	0x0Ful
#define MCHP_ESPI_LTR_CTRL_TAG_MASK	\
	SHLU32(MCHP_ESPI_LTR_CTRL_TAG_MASK0, MCHP_ESPI_LTR_CTRL_TAG_POS)

#define MCHP_ESPI_LTR_MSG_VAL_POS	0u
#define MCHP_ESPI_LTR_MSG_VAL_MASK0	0x3FFul
#define MCHP_ESPI_LTR_MSG_VAL_MASK	\
	SHLU32(MCHP_ESPI_LTR_MSG_VAL_MASK0, MCHP_ESPI_LTR_MSG_VAL_POS)
#define MCHP_ESPI_LTR_MSG_SC_POS	10u
#define MCHP_ESPI_LTR_MSG_SC_MASK0	0x07ul
#define MCHP_ESPI_LTR_MSG_SC_MASK	\
	SHLU32(MCHP_ESPI_LTR_MSG_SC_MASK0, MCHP_ESPI_LTR_MSG_SC_POS)
#define MCHP_ESPI_LTR_MSG_RT_POS	13u
#define MCHP_ESPI_LTR_MSG_RT_MASK0	0x03ul
#define MCHP_ESPI_LTR_MSG_RT_MASK	\
	SHLU32(MCHP_ESPI_LTR_MSG_RT_MASK0, MCHP_ESPI_LTR_MSG_RT_POS)
/* eSPI specification indicates RT field must be 00b */
#define MCHP_ESPI_LTR_MSG_RT_VAL	0u
#define MCHP_ESPI_LTR_MSG_REQ_POS	15u
/* inifinite latency(default) */
#define MCHP_ESPI_LTR_MSG_REQ_INF	0u
/* latency computed from VAL and SC(scale) fields */
#define MCHP_ESPI_LTR_MSG_REQ_VAL	 BIT(MCHP_ESPI_LTR_MSG_REQ_POS)

/*---- ESPI_IO_OOB - eSPI IO OOB registers ----*/
#define MCHP_ESPI_OOB_RX_ADDR_LSW_MASK	0xFFFFFFFCul
#define MCHP_ESPI_OOB_TX_ADDR_LSW_MASK	0xFFFFFFFCul

/* OOB RX_LEN register */
/* Number of bytes received (RO) */
#define MCHP_ESPI_OOB_RX_LEN_POS	0u
#define MCHP_ESPI_OOB_RX_LEN_MASK	0x1FFFul
/* Recieve buffer length field (RW) */
#define MCHP_ESPI_OOB_RX_BUF_LEN_POS	16u
#define MCHP_ESPI_OOB_RX_BUF_LEN_MASK0	0x1FFFul
#define MCHP_ESPI_OOB_RX_BUF_LEN_MASK	\
	SHLU32(MCHP_ESPI_OOB_RX_BUF_LEN_MASK0, MCHP_ESPI_OOB_RX_BUF_LEN_POS)

/* OOB TX_LEN register */
#define MCHP_ESPI_OOB_TX_MSG_LEN_POS	0u
#define MCHP_ESPI_OOB_TX_MSG_LEN_MASK	0x1FFFul

/* OOB RX_CTRL */
/* Set AVAIL bit to indicate SRAM Buffer and size has been configured */
#define MCHP_ESPI_OOB_RX_CTRL_AVAIL_POS	0u /* WO */
#define MCHP_ESPI_OOB_RX_CTRL_AVAIL	BIT(MCHP_ESPI_OOB_RX_CTRL_AVAIL_POS)
#define MCHP_ESPI_OOB_RX_CTRL_CHEN_POS	9u /* RO */
#define MCHP_ESPI_OOB_RX_CTRL_CHEN	BIT(MCHP_ESPI_OOB_RX_CTRL_CHEN_POS)
/* Copy of eSPI OOB Capabilities max. payload size */
#define MCHP_ESPI_OOB_RX_CTRL_MAX_SZ_POS	16u /* RO */
#define MCHP_ESPI_OOB_RX_CTRL_MAX_SZ_MASK0	0x07u
#define MCHP_ESPI_OOB_RX_CTRL_MAX_SZ_MASK	\
	SHLU32(MCHP_ESPI_OOB_RX_CTRL_MAX_SZ_MASK0, \
	       MCHP_ESPI_OOB_RX_CTRL_MAX_SZ_POS)

/* OOB RX_IEN */
#define MCHP_ESPI_OOB_RX_IEN_POS	0u
#define MCHP_ESPI_OOB_RX_IEN		BIT(MCHP_ESPI_OOB_RX_IEN_POS)

/* OOB RX_STS */
#define MCHP_ESPI_OOB_RX_STS_DONE_POS	0u /* RW1C */
#define MCHP_ESPI_OOB_RX_STS_DONE	BIT(MCHP_ESPI_OOB_RX_STS_DONE_POS)
#define MCHP_ESPI_OOB_RX_STS_IBERR_POS	1u  /* RW1C */
#define MCHP_ESPI_OOB_RX_STS_IBERR	BIT(MCHP_ESPI_OOB_RX_STS_IBERR_POS)
#define MCHP_ESPI_OOB_RX_STS_OVRUN_POS	2u  /* RW1C */
#define MCHP_ESPI_OOB_RX_STS_OVRUN	BIT(MCHP_ESPI_OOB_RX_STS_OVRUN_POS)
#define MCHP_ESPI_OOB_RX_STS_RXEN_POS	3u  /* RO */
#define MCHP_ESPI_OOB_RX_STS_RXEN	BIT(MCHP_ESPI_OOB_RX_STS_RXEN_POS)
#define MCHP_ESPI_OOB_RX_STS_TAG_POS	8u  /* RO */
#define MCHP_ESPI_OOB_RX_STS_TAG_MASK0	0x0Ful
#define MCHP_ESPI_OOB_RX_STS_TAG_MASK	\
	SHLU32(MCHP_ESPI_OOB_RX_STS_TAG_MASK0, MCHP_ESPI_OOB_RX_STS_TAG_POS)

#define MCHP_ESPI_OOB_RX_STS_ALL_RW1C	0x07ul
#define MCHP_ESPI_OOB_RX_STS_ALL	0x0Ful

/* OOB TX_CTRL */
#define MCHP_ESPI_OOB_TX_CTRL_START_POS 0u /* WO */
#define MCHP_ESPI_OOB_TX_CTRL_START	BIT(MCHP_ESPI_OOB_TX_CTRL_START_POS)
#define MCHP_ESPI_OOB_TX_CTRL_TAG_POS	8u  /* RW */
#define MCHP_ESPI_OOB_TX_CTRL_TAG_MASK0 0x0Ful
#define MCHP_ESPI_OOB_TX_CTRL_TAG_MASK	\
	SHLU32(MCHP_ESPI_OOB_TX_CTRL_TAG_MASK0, MCHP_ESPI_OOB_TX_CTRL_TAG_POS)

/* OOB TX_IEN */
#define MCHP_ESPI_OOB_TX_IEN_DONE_POS	0u
#define MCHP_ESPI_OOB_TX_IEN_DONE	BIT(MCHP_ESPI_OOB_TX_IEN_DONE_POS)
#define MCHP_ESPI_OOB_TX_IEN_CHG_EN_POS 1u
#define MCHP_ESPI_OOB_TX_IEN_CHG_EN	BIT(MCHP_ESPI_OOB_TX_IEN_CHG_EN_POS)
#define MCHP_ESPI_OOB_TX_IEN_ALL	0x03ul

/* OOB TX_STS */
#define MCHP_ESPI_OOB_TX_STS_DONE_POS	0u /* RW1C */
#define MCHP_ESPI_OOB_TX_STS_DONE	BIT(MCHP_ESPI_OOB_TX_STS_DONE_POS)
#define MCHP_ESPI_OOB_TX_STS_CHG_EN_POS 1u /* RW1C */
#define MCHP_ESPI_OOB_TX_STS_CHG_EN	BIT(MCHP_ESPI_OOB_TX_STS_CHG_EN_POS)
#define MCHP_ESPI_OOB_TX_STS_IBERR_POS	2u /* RW1C */
#define MCHP_ESPI_OOB_TX_STS_IBERR	BIT(MCHP_ESPI_OOB_TX_STS_IBERR_POS)
#define MCHP_ESPI_OOB_TX_STS_OVRUN_POS	3u /* RW1C */
#define MCHP_ESPI_OOB_TX_STS_OVRUN	BIT(MCHP_ESPI_OOB_TX_STS_OVRUN_POS)
#define MCHP_ESPI_OOB_TX_STS_BADREQ_POS 5u /* RW1C */
#define MCHP_ESPI_OOB_TX_STS_BADREQ	BIT(MCHP_ESPI_OOB_TX_STS_BADREQ_POS)
#define MCHP_ESPI_OOB_TX_STS_BUSY_POS	8u /* RO */
#define MCHP_ESPI_OOB_TX_STS_BUSY	BIT(MCHP_ESPI_OOB_TX_STS_BUSY_POS)
/* Read-only copy of OOB Channel Enabled bit */
#define MCHP_ESPI_OOB_TX_STS_CHEN_POS	9u /* RO */
#define MCHP_ESPI_OOB_TX_STS_CHEN	BIT(MCHP_ESPI_OOB_TX_STS_CHEN_POS)

#define MCHP_ESPI_OOB_TX_STS_ALL_RW1C	0x2Ful

/*---- MCHP_ESPI_IO_FC - eSPI IO Flash channel registers ----*/
/* FC MEM_ADDR_LSW */
#define MCHP_ESPI_FC_MEM_ADDR_LSW_MASK	0xFFFFFFFCul

/* FC CTRL */
#define MCHP_ESPI_FC_CTRL_START_POS	0u /* WO */
#define MCHP_ESPI_FC_CTRL_START		BIT(MCHP_ESPI_FC_CTRL_START_POS)
#define MCHP_ESPI_FC_CTRL_FUNC_POS	2u  /* RW */
#define MCHP_ESPI_FC_CTRL_FUNC_MASK0	0x03ul
#define MCHP_ESPI_FC_CTRL_FUNC_MASK	\
	SHLU32(MCHP_ESPI_FC_CTRL_FUNC_MASK0, MCHP_ESPI_FC_CTRL_FUNC_POS)
#define MCHP_ESPI_FC_CTRL_RD0		0x00ul
#define MCHP_ESPI_FC_CTRL_WR0		0x01ul
#define MCHP_ESPI_FC_CTRL_ERS0		0x02ul
#define MCHP_ESPI_FC_CTRL_ERL0		0x03ul
#define MCHP_ESPI_FC_CTRL_FUNC(f)	\
	((uint32_t)(f) & MCHP_ESPI_FC_CTRL_FUNC_MASK)

#define MCHP_ESPI_FC_CTRL_TAG_POS	4u
#define MCHP_ESPI_FC_CTRL_TAG_MASK0	0x0Ful
#define MCHP_ESPI_FC_CTRL_TAG_MASK	\
	SHLU32(MCHP_ESPI_FC_CTRL_TAG_MASK0, MCHP_ESPI_FC_CTRL_TAG_POS)

#define MCHP_ESPI_FC_CTRL_TAG(t)	\
	((uint32_t)(t) & MCHP_ESPI_FC_CTRL_TAG_MASK)

#define MCHP_ESPI_FC_CTRL_ABORT_POS	16u /* WO */
#define MCHP_ESPI_FC_CTRL_ABORT		BIT(MCHP_ESPI_FC_CTRL_ABORT_POS)

/* FC IEN */
#define MCHP_ESPI_FC_IEN_DONE_POS	0u
#define MCHP_ESPI_FC_IEN_DONE		BIT(MCHP_ESPI_FC_IEN_DONE_POS)
#define MCHP_ESPI_FC_IEN_CHG_EN_POS	1u
#define MCHP_ESPI_FC_IEN_CHG_EN		BIT(MCHP_ESPI_FC_IEN_CHG_EN_POS)

/* FC CFG */
#define MCHP_ESPI_FC_CFG_BUSY_POS	0u /* RO */
#define MCHP_ESPI_FC_CFG_BUSY		BIT(MCHP_ESPI_FC_CFG_BUSY_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_POS	2u  /* RO */
#define MCHP_ESPI_FC_CFG_ERBSZ_MASK0	0x07ul
#define MCHP_ESPI_FC_CFG_ERBSZ_MASK	\
	SHLU32(MCHP_ESPI_FC_CFG_ERBSZ_MASK0, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_4K	\
	SHLU32(0x01ul, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_64K	\
	SHLU32(0x02ul, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_4K_64K	\
	SHLU32(0x03ul, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_128K	\
	SHLU32(0x04ul, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_ERBSZ_256K	\
	SHLU32(0x05ul, MCHP_ESPI_FC_CFG_ERBSZ_POS)
#define MCHP_ESPI_FC_CFG_MAXPLD_POS	8u /* RO */
#define MCHP_ESPI_FC_CFG_MAXPLD_MASK0	0x07ul
#define MCHP_ESPI_FC_CFG_MAXPLD_MASK	\
	SHLU32(MCHP_ESPI_FC_CFG_MAXPLD_MASK0, MCHP_ESPI_FC_CFG_MAXPLD_POS)
#define MCHP_ESPI_FC_CFG_MAXPLD_64B	\
	SHLU32(0x01ul, MCHP_ESPI_FC_CFG_MAXPLD_POS)
#define MCHP_ESPI_FC_CFG_MAXPLD_128B	\
	SHLU32(0x02ul, MCHP_ESPI_FC_CFG_MAXPLD_POS)
#define MCHP_ESPI_FC_CFG_MAXPLD_256B	\
	SHLU32(0x03ul, MCHP_ESPI_FC_CFG_MAXPLD_POS)
#define MCHP_ESPI_FC_CFG_SAFS_SEL_POS	11u
#define MCHP_ESPI_FC_CFG_SAFS_SEL	BIT(MCHP_ESPI_FC_CFG_SAFS_SEL_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_POS	12u /* RO */
#define MCHP_ESPI_FC_CFG_MAXRD_MASK0	0x07ul
#define MCHP_ESPI_FC_CFG_MAXRD_MASK	\
	SHLU32(MCHP_ESPI_FC_CFG_MAXRD_MASK0, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_64B	\
	SHLU32(0x01ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_128B	\
	SHLU32(0x02ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_256B	\
	SHLU32(0x03ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_512B	\
	SHLU32(0x04ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_1K	\
	SHLU32(0x05ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_2K	\
	SHLU32(0x06ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_MAXRD_4K	\
	SHLU32(0x07ul, MCHP_ESPI_FC_CFG_MAXRD_POS)
#define MCHP_ESPI_FC_CFG_FORCE_MS_POS	28u /* RW */
#define MCHP_ESPI_FC_CFG_FORCE_MS_MASK0 0x03ul
#define MCHP_ESPI_FC_CFG_FORCE_MS_MASK	\
	SHLU32(MCHP_ESPI_FC_CFG_FORCE_MS_MASK0, MCHP_ESPI_FC_CFG_FORCE_MS_POS)
/* Host (eSPI Master) can select MAFS or SAFS */
#define MCHP_ESPI_FC_CFG_FORCE_NONE	0ul
/* EC forces eSPI slave HW to only allow MAFS */
#define MCHP_ESPI_FC_CFG_FORCE_MAFS	\
	SHLU32(0x02ul, MCHP_ESPI_FC_CFG_FORCE_MS_POS)
/* EC forces eSPI slave HW to only allow SAFS */
#define MCHP_ESPI_FC_CFG_FORCE_SAFS	\
	SHLU32(0x03ul, MCHP_ESPI_FC_CFG_FORCE_MS_POS)

/* FC STS */
#define MCHP_ESPI_FC_STS_CHAN_EN_POS	0u /* RO */
#define MCHP_ESPI_FC_STS_CHAN_EN	BIT(MCHP_ESPI_FC_STS_CHAN_EN_POS)

#define MCHP_ESPI_FC_STS_CHAN_EN_CHG_POS	1u /* RW1C */
#define MCHP_ESPI_FC_STS_CHAN_EN_CHG	BIT(MCHP_ESPI_FC_STS_CHAN_EN_CHG_POS)

#define MCHP_ESPI_FC_STS_DONE_POS	2u /* RW1C */
#define MCHP_ESPI_FC_STS_DONE		BIT(MCHP_ESPI_FC_STS_DONE_POS)
#define MCHP_ESPI_FC_STS_MDIS_POS	3u /* RW1C */
#define MCHP_ESPI_FC_STS_MDIS		BIT(MCHP_ESPI_FC_STS_MDIS_POS)
#define MCHP_ESPI_FC_STS_IBERR_POS	4u /* RW1C */
#define MCHP_ESPI_FC_STS_IBERR		BIT(MCHP_ESPI_FC_STS_IBERR_POS)
#define MCHP_ESPI_FC_STS_ABS_POS	5u /* RW1C */
#define MCHP_ESPI_FC_STS_ABS		BIT(MCHP_ESPI_FC_STS_ABS_POS)
#define MCHP_ESPI_FC_STS_OVRUN_POS	6u /* RW1C */
#define MCHP_ESPI_FC_STS_OVRUN		BIT(MCHP_ESPI_FC_STS_OVRUN_POS)
#define MCHP_ESPI_FC_STS_INC_POS	7u /* RW1C */
#define MCHP_ESPI_FC_STS_INC		BIT(MCHP_ESPI_FC_STS_INC_POS)
#define MCHP_ESPI_FC_STS_FAIL_POS	8u /* RW1C */
#define MCHP_ESPI_FC_STS_FAIL		BIT(MCHP_ESPI_FC_STS_FAIL_POS)
#define MCHP_ESPI_FC_STS_OVFL_POS	9u /* RW1C */
#define MCHP_ESPI_FC_STS_OVFL		BIT(MCHP_ESPI_FC_STS_OVFL_POS)
#define MCHP_ESPI_FC_STS_BADREQ_POS	11u /* RW1C */
#define MCHP_ESPI_FC_STS_BADREQ		BIT(MCHP_ESPI_FC_STS_BADREQ_POS)

#define MCHP_ESPI_FC_STS_ALL_RW1C	0x0BFEul

/*---- MCHP_ESPI_IO_BAR_HOST - eSPI IO Host visible BAR registers ----*/

/*
 * IOBAR_INH_LSW/MSW 64-bit register: each bit = 1 inhibits an I/O BAR
 * independent of the BAR's Valid bit.
 * Logical Device Number = bit position.
 */
#define MCHP_ESPI_IOBAR_LDN_MBOX	0x00u
#define MCHP_ESPI_IOBAR_LDN_KBC		0x01u
#define MCHP_ESPI_IOBAR_LDN_ACPI_EC_0	0x02u
#define MCHP_ESPI_IOBAR_LDN_ACPI_EC_1	0x03u
#define MCHP_ESPI_IOBAR_LDN_ACPI_EC_2	0x04u
#define MCHP_ESPI_IOBAR_LDN_ACPI_EC_3	0x05u
#define MCHP_ESPI_IOBAR_LDN_ACPI_EC_4	0x06u
#define MCHP_ESPI_IOBAR_LDN_ACPI_PM1	0x07u
#define MCHP_ESPI_IOBAR_LDN_PORT92	0x08u
#define MCHP_ESPI_IOBAR_LDN_UART_0	0x09u
#define MCHP_ESPI_IOBAR_LDN_UART_1	0x0Au
#define MCHP_ESPI_IOBAR_LDN_IOC		0x0Du
#define MCHP_ESPI_IOBAR_LDN_MEM		0x0Eu
#define MCHP_ESPI_IOBAR_LDN_GLUE_LOG	0x0Fu
#define MCHP_ESPI_IOBAR_LDN_EMI_0	0x10u
#define MCHP_ESPI_IOBAR_LDN_EMI_1	0x11u
#define MCHP_ESPI_IOBAR_LDN_EMI_2	0x12u
#define MCHP_ESPI_IOBAR_LDN_RTC		0x14u
#define MCHP_ESPI_IOBAR_LDN_P80CAP_0	0x20u	/* BDP Port80 Capture */
#define MCHP_ESPI_IOBAR_LDN_P80CAP_1	0x21u	/* BDP Alias Capture */
#define MCHP_ESPI_IOBAR_LDN_T32B	0x2Fu
#define MCHP_ESPI_IOBAR_LDN_LASIC	0x30u

/*
 * IOBAR_INIT: Default address of I/O Plug and Play Super-IO index/data
 * configuration registers. (Defaults to 0x2E/0x2F)
 */
#define MCHP_ESPI_IOBAR_INIT_DFLT	0x2Eul

/*
 * EC_IRQ: A write to bit[0] triggers EC SERIRQ. The actual
 * SERIRQ slot is configured in MCHP_ESPI_IO_SIRQ.EC_SIRQ
 */
#define MCHP_ESPI_EC_IRQ_GEN (1ul << 0)

/* 32-bit Host IO BAR */
#define MCHP_ESPI_IO_BAR_HOST_VALID_POS		0u
#define MCHP_ESPI_IO_BAR_HOST_VALID		\
	BIT(MCHP_ESPI_IO_BAR_HOST_VALID_POS)
#define MCHP_ESPI_IO_BAR_HOST_ADDR_POS		16u
#define MCHP_ESPI_IO_BAR_HOST_ADDR_MASK0	0xFFFFul
#define MCHP_ESPI_IO_BAR_HOST_ADDR_MASK		0xFFFF0000ul

/* Offsets from first SIRQ */
#define MCHP_ESPI_SIRQ_MBOX_SIRQ	0ul
#define MCHP_ESPI_SIRQ_MBOX_SMI		1ul
#define MCHP_ESPI_SIRQ_KBC_KIRQ		2ul
#define MCHP_ESPI_SIRQ_KBC_MIRQ		3ul
#define MCHP_ESPI_SIRQ_ACPI_EC0		4ul
#define MCHP_ESPI_SIRQ_ACPI_EC1		5ul
#define MCHP_ESPI_SIRQ_ACPI_EC2		6ul
#define MCHP_ESPI_SIRQ_ACPI_EC3		7ul
#define MCHP_ESPI_SIRQ_ACPI_EC4		8ul
#define MCHP_ESPI_SIRQ_UART0		9ul
#define MCHP_ESPI_SIRQ_UART1		10ul
#define MCHP_ESPI_SIRQ_EMI0_HOST	11ul
#define MCHP_ESPI_SIRQ_EMI0_E2H		12ul
#define MCHP_ESPI_SIRQ_EMI1_HOST	13ul
#define MCHP_ESPI_SIRQ_EMI1_E2H		14ul
#define MCHP_ESPI_SIRQ_EMI2_HOST	15ul
#define MCHP_ESPI_SIRQ_EMI2_E2H		16ul
#define MCHP_ESPI_SIRQ_RTC		17ul
#define MCHP_ESPI_SIRQ_EC		18ul
#define MCHP_ESPI_SIRQ_RSVD19		19ul
#define MCHP_ESPI_SIRQ_MAX		20ul

/*
 * Values for Logical Device SIRQ registers.
 * Unless disabled each logical device must have a unique value
 * programmed to its SIRQ register.
 * Values 0x00u through 0x7Fu are sent using VWire host index 0x00
 * Values 0x80h through 0xFEh are sent using VWire host index 0x01
 * All registers reset default is 0xFFu (disabled).
 */
#define MCHP_ESPI_IO_SIRQ_DIS	0xFFu

/* Interfaces to any C modules */
#ifdef __cplusplus
extern "C" {
#endif

/* Array indices for eSPI IO BAR Host and EC-only register structures */
enum espi_io_bar_idx {
	IOB_IOC = 0,
	IOB_MEM,
	IOB_MBOX,
	IOB_KBC,
	IOB_ACPI_EC0,
	IOB_ACPI_EC1,
	IOB_ACPI_EC2,
	IOB_ACPI_EC3,
	IOB_ACPI_EC4,
	IOB_ACPI_PM1,
	IOB_PORT92,
	IOB_UART0,
	IOB_UART1,
	IOB_EMI0,
	IOB_EMI1,
	IOB_EMI2,
	IOB_P80BD,
	IOB_P80BD_ALIAS,
	IOB_RTC,
	IOB_RSVD19,
	IOB_T32B,
	IOB_RSVD21,
	IOB_GLUE,
	IOB_MAX
};

/** @brief Serial IRQ byte register indices */
enum espi_io_sirq_idx {
	SIRQ_MBOX = 0,	   SIRQ_MBOX_SMI,     SIRQ_KBC_KIRQ,
	SIRQ_KBC_MIRQ,	   SIRQ_ACPI_EC0_OBF, SIRQ_ACPI_EC1_OBF,
	SIRQ_ACPI_EC2_OBF, SIRQ_ACPI_EC3_OBF, SIRQ_ACPI_EC4_OBF,
	SIRQ_UART0,	   SIRQ_UART1,	      SIRQ_EMI0_HEV,
	SIRQ_EMI0_E2H,	   SIRQ_EMI1_HEV,     SIRQ_EMI1_E2H,
	SIRQ_EMI2_HEV,	   SIRQ_EMI2_E2H,     SIRQ_RTC,
	SIRQ_EC,	   SIRQ_MAX
};

#ifdef __cplusplus
}
#endif

#endif /* #ifndef _COMPONENT_ESPI_IO_H */
/* end espi_io.h */
/**   @}
 */
